class DisjointSet
{
    vector<int> parent;  // to store the ultimate parent of each node..
    vector<int> size;   //  to store the size of each ultimate parent..
    
    public:
    // constructor to initialize all the required containers..
        DisjointSet(int V){
            parent.resize(V+1);  
            size.resize(V+1, 1);  // as initially each node would be parent of itself..
        
            for(int i=0 ; i<V+1 ; i++){
                parent[i] = i;
            }
        }
        
        int find_ultp(int node){
            if(parent[node] == node){
                return node;
            }
            
            // path compression step..
            /* i.e., in the process of finding the ultimate parent of any one node in 
            the component we'll be ending up finding the ultimate parent of all those
            nodes coming in the way through the following step -> 
            
            parent[node] = find_ultp(parent[node]); .. */
            return parent[node] = find_ultp(parent[node]);  
        }
        
        void unionBySize(int u, int v){
            int ultp_u = find_ultp(u);
            int ultp_v = find_ultp(v);
            
            if(ultp_u != ultp_v){
                if(size[ultp_u] >= size[ultp_v]){
                    parent[ultp_v] = ultp_u;
                    size[ultp_u] += size[ultp_v];
                }
                
                else{
                    parent[ultp_u] = ultp_v;
                    size[ultp_v] += size[ultp_u];
                }
            }
        }
        
};
